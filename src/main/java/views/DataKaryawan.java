/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views;




import config.DatabaseConnection;
import controllers.DepartemenController;
import controllers.JabatanController;
import controllers.KaryawanController;
import java.io.InputStream;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import models.Departemen;
import models.Jabatan;
import models.Karyawan;

import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author darwisy
 */
public class DataKaryawan extends javax.swing.JPanel {

    /**
     * Creates new form User
     */
    public DataKaryawan() {
        initComponents();
        setTableKaryawans();
        loadKaryawans();
        loadComboJabatan();
        loadComboDepartemen();
        loadComboStatus();
        loadComboStatusKontrak();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        panelMain = new javax.swing.JPanel();
        panelView = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelKaryawan = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnTambah = new javax.swing.JButton();
        btnBatal = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnKontrak = new javax.swing.JButton();
        panelAdd = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnTambahBatal = new javax.swing.JButton();
        btnTambahReset = new javax.swing.JButton();
        btnSimpan = new javax.swing.JButton();
        tambahKD = new javax.swing.JTextField();
        tambahNama = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tambahJabatan = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        tambahDepartemen = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        tambahStatus = new javax.swing.JComboBox<>();
        tanggalMasuk = new com.github.lgooddatepicker.components.DatePicker();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        tanggalMulai = new com.github.lgooddatepicker.components.DatePicker();
        jLabel18 = new javax.swing.JLabel();
        statusKontrak = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        tanggalAkhir = new com.github.lgooddatepicker.components.DatePicker();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tambahNoKtp = new javax.swing.JTextField();
        tambahNoHp = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tambahAlamat = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.CardLayout());

        panelMain.setLayout(new java.awt.CardLayout());

        panelView.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Master Data > Karyawan");
        jLabel1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel2.setText("Data Karyawan");
        jLabel2.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportView(tabelKaryawan);

        tabelKaryawan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelKaryawan.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tabelKaryawan.setGridColor(new java.awt.Color(204, 204, 204));
        tabelKaryawan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelKaryawanMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelKaryawan);

        txtSearch.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSearch.setText("Search...");
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        btnTambah.setText("Tambah");
        btnTambah.setBackground(new java.awt.Color(81, 108, 248));
        btnTambah.setBorder(null);
        btnTambah.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnTambah.setForeground(new java.awt.Color(255, 255, 255));
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnBatal.setText("Batal");
        btnBatal.setBackground(new java.awt.Color(248, 173, 80));
        btnBatal.setBorder(null);
        btnBatal.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnBatal.setForeground(new java.awt.Color(255, 255, 255));
        btnBatal.setPreferredSize(new java.awt.Dimension(62, 22));
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });

        btnDelete.setText("Hapus");
        btnDelete.setBackground(new java.awt.Color(248, 80, 108));
        btnDelete.setBorder(null);
        btnDelete.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setPreferredSize(new java.awt.Dimension(62, 22));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnKontrak.setText("Cetak Surat Kontrak");
        btnKontrak.setBackground(new java.awt.Color(51, 51, 51));
        btnKontrak.setBorder(null);
        btnKontrak.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnKontrak.setForeground(new java.awt.Color(255, 255, 255));
        btnKontrak.setPreferredSize(new java.awt.Dimension(62, 22));
        btnKontrak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKontrakActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelViewLayout = new javax.swing.GroupLayout(panelView);
        panelView.setLayout(panelViewLayout);
        panelViewLayout.setHorizontalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelViewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelViewLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelViewLayout.createSequentialGroup()
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnKontrak, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelViewLayout.createSequentialGroup()
                                .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelViewLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelViewLayout.createSequentialGroup()
                                .addGap(430, 430, 430)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(20, 20, 20))
        );
        panelViewLayout.setVerticalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnKontrak, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        panelMain.add(panelView, "card3");

        panelAdd.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setText("Master Data > Karyawan");
        jLabel3.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel4.setText("Tambah Data Karyawan");
        jLabel4.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N

        btnTambahBatal.setBackground(new java.awt.Color(248, 173, 80));
        btnTambahBatal.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnTambahBatal.setForeground(new java.awt.Color(255, 255, 255));
        btnTambahBatal.setText("Batal");
        btnTambahBatal.setBorder(null);
        btnTambahBatal.setMaximumSize(new java.awt.Dimension(90, 28));
        btnTambahBatal.setMinimumSize(new java.awt.Dimension(90, 28));
        btnTambahBatal.setPreferredSize(new java.awt.Dimension(90, 28));
        btnTambahBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahBatalActionPerformed(evt);
            }
        });

        btnTambahReset.setBackground(new java.awt.Color(51, 51, 51));
        btnTambahReset.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnTambahReset.setForeground(new java.awt.Color(255, 255, 255));
        btnTambahReset.setText("Reset");
        btnTambahReset.setBorder(null);
        btnTambahReset.setMaximumSize(new java.awt.Dimension(90, 28));
        btnTambahReset.setMinimumSize(new java.awt.Dimension(90, 28));
        btnTambahReset.setPreferredSize(new java.awt.Dimension(90, 28));
        btnTambahReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahResetActionPerformed(evt);
            }
        });

        btnSimpan.setText("Simpan");
        btnSimpan.setBackground(new java.awt.Color(81, 108, 248));
        btnSimpan.setBorder(null);
        btnSimpan.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnSimpan.setForeground(new java.awt.Color(255, 255, 255));
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        tambahKD.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahNama.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel5.setText("Nama Karyawan");
        jLabel5.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel6.setText("Jabatan");
        jLabel6.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahJabatan.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel13.setText("Departemen");
        jLabel13.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahDepartemen.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tambahDepartemen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahDepartemenActionPerformed(evt);
            }
        });

        jLabel14.setText("Status");
        jLabel14.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2" }));
        tambahStatus.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tanggalMasuk.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel15.setText("Tanggal Masuk");
        jLabel15.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel17.setText("Tanggal Mulai Kontrak");
        jLabel17.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tanggalMulai.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel18.setText("Status Kontrak");
        jLabel18.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        statusKontrak.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        statusKontrak.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel19.setText("Tanggal Berakhir Kontrak");
        jLabel19.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tanggalAkhir.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel7.setText("Kode Karyawan");
        jLabel7.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel8.setText("No KTP");
        jLabel8.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahNoKtp.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahNoHp.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel9.setText("Alamat");
        jLabel9.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel10.setText("No Hp");
        jLabel10.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahAlamat.setColumns(20);
        tambahAlamat.setRows(5);
        tambahAlamat.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jScrollPane3.setViewportView(tambahAlamat);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 435, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tambahNama, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tambahJabatan, javax.swing.GroupLayout.Alignment.LEADING, 0, 375, Short.MAX_VALUE))
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(btnTambahReset, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(btnTambahBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tanggalMulai, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(statusKontrak, javax.swing.GroupLayout.Alignment.LEADING, 0, 375, Short.MAX_VALUE)
                                .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tambahDepartemen, javax.swing.GroupLayout.Alignment.LEADING, 0, 375, Short.MAX_VALUE)
                                .addComponent(tambahStatus, javax.swing.GroupLayout.Alignment.LEADING, 0, 375, Short.MAX_VALUE)
                                .addComponent(tanggalMasuk, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tanggalAkhir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(57, 57, 57)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tambahKD)
                            .addComponent(tambahNoKtp)
                            .addComponent(tambahNoHp)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3))))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTambahBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTambahReset, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tambahNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tambahKD, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahJabatan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahNoKtp, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahDepartemen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahNoHp, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tambahStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tanggalMasuk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tanggalMulai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tanggalAkhir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusKontrak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(238, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
        );

        panelMain.add(panelAdd, "card9");

        add(panelMain, "card9");
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        panelMain.removeAll();
        panelMain.add(panelAdd);
        panelMain.repaint();
        panelMain.revalidate();
        
        
        if (btnTambah.getText().equals("Ubah")) {
            dataTable(); 
            btnSimpan.setText("Perbarui");
            tambahKD.setEditable(false);
        } else {
            resetForm(); 
            btnSimpan.setText("Simpan");
            tambahKD.setText(generateKodeKaryawan());
            tambahKD.setEditable(false);
        }

    }//GEN-LAST:event_btnTambahActionPerformed

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
       searchData();
    }//GEN-LAST:event_txtSearchKeyTyped

    private void tabelKaryawanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelKaryawanMouseClicked
        if(btnTambah.getText().equals("Tambah")){
            btnTambah.setText("Ubah");
        }
        btnBatal.setVisible(true);
        btnDelete.setVisible(true);
        btnKontrak.setVisible(true);
    }//GEN-LAST:event_tabelKaryawanMouseClicked

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        showPanelView();
        loadKaryawans();
        resetForm();
         if(btnTambah.getText().equals("Ubah")){
            btnTambah.setText("Tambah");
        }
    }//GEN-LAST:event_btnBatalActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteData();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        String currentText = btnSimpan.getText();

                switch (currentText) {
                        case "Tambah":
                        btnSimpan.setText("Simpan");
                        break;
                        case "Simpan":
                        insertData();
                        break;
                        case "Perbarui":
                        updateData();
                        break;
                    }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnTambahResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahResetActionPerformed
        resetForm();
    }//GEN-LAST:event_btnTambahResetActionPerformed

    private void btnTambahBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahBatalActionPerformed
        showPanelView();
        loadKaryawans();
        resetForm();
        if(btnTambah.getText().equals("Ubah")){
            btnTambah.setText("Tambah");
        }
    }//GEN-LAST:event_btnTambahBatalActionPerformed

    private void tambahDepartemenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahDepartemenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tambahDepartemenActionPerformed

    private void btnKontrakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKontrakActionPerformed
        Connection conn = null;
        try {
            // Verify row selection
            if (tabelKaryawan.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Please select an employee first!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Prepare report parameters
            Map<String, Object> parameters = new HashMap<>();
            String selectedKdKaryawan = tabelKaryawan.getValueAt(tabelKaryawan.getSelectedRow(), 1).toString().trim();
            parameters.put("kd_karyawan", selectedKdKaryawan);

            // Get connection from centralized config
            conn = DatabaseConnection.getConnection();

            // Load report from classpath 
            InputStream reportStream = getClass().getClassLoader().getResourceAsStream("reports/SuratKontrak.jrxml");
            if (reportStream == null) {
                throw new RuntimeException("Report template not found!");
            }

            // Compile and fill report
            JasperReport jasperReport = JasperCompileManager.compileReport(reportStream);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, conn);

            // Display report
            if (jasperPrint.getPages().isEmpty()) {
                JOptionPane.showMessageDialog(null, 
                    "No data found for employee: " + selectedKdKaryawan, 
                    "Empty Report", 
                    JOptionPane.INFORMATION_MESSAGE);
            } else {
                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setTitle("Employee Contract - " + selectedKdKaryawan);
                viewer.setVisible(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, 
                "Error generating report: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } finally {
            // Ensure connection is closed
            if (conn != null) {
                try { conn.close(); } catch (SQLException e) { /* Ignore */ }
            }
        }
    }//GEN-LAST:event_btnKontrakActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnKontrak;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnTambahBatal;
    private javax.swing.JButton btnTambahReset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelView;
    private javax.swing.JComboBox<String> statusKontrak;
    private javax.swing.JTable tabelKaryawan;
    private javax.swing.JTextArea tambahAlamat;
    private javax.swing.JComboBox<Departemen> tambahDepartemen;
    private javax.swing.JComboBox<Jabatan> tambahJabatan;
    private javax.swing.JTextField tambahKD;
    private javax.swing.JTextField tambahNama;
    private javax.swing.JTextField tambahNoHp;
    private javax.swing.JTextField tambahNoKtp;
    private javax.swing.JComboBox<String> tambahStatus;
    private com.github.lgooddatepicker.components.DatePicker tanggalAkhir;
    private com.github.lgooddatepicker.components.DatePicker tanggalMasuk;
    private com.github.lgooddatepicker.components.DatePicker tanggalMulai;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    
    private void showPanelView(){
        panelMain.removeAll();
        panelMain.add(panelView);
        btnBatal.setVisible(false);
        btnKontrak.setVisible(false);
        btnDelete.setVisible(false);
        panelMain.repaint();
        panelMain.revalidate();
    }
    
   private void loadKaryawans() {
    btnKontrak.setVisible(false);
    btnBatal.setVisible(false);
    btnDelete.setVisible(false);
    KaryawanController karyawanController = new KaryawanController();
    List<Karyawan> karyawans = karyawanController.getAllKaryawan();
    
    DefaultTableModel model = (DefaultTableModel)tabelKaryawan.getModel(); 
    model.setRowCount(0);
    
    int no = 1;
    if (karyawans != null) {
        for (Karyawan karyawan : karyawans) {
            model.addRow(new Object[]{
                no++,                       // Sequence number
                karyawan.getKdKaryawan(),
                karyawan.getNama(),
                karyawan.getNoKtp(),
                karyawan.getNoHp(),
                karyawan.getAlamat(),
                karyawan.getJabatan(),
                karyawan.getDepartemen(),
                karyawan.getStatus(),
                karyawan.getTanggalMasuk(),
                karyawan.getTanggalMulaiKontrak(),
                karyawan.getTanggalBerakhirKontrak(),
                karyawan.getStatusKontrak()
            });
        }
    }
}
   
   private void setTableKaryawans() {
    DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Make all cells non-editable
        }
    };
    
    // Add columns
    model.addColumn("No");
    model.addColumn("Kode");
    model.addColumn("Nama");
    model.addColumn("No KTP");
    model.addColumn("No HP");
    model.addColumn("Alamat");
    model.addColumn("Jabatan");
    model.addColumn("Dept");
    model.addColumn("Status");
    model.addColumn("Tgl Masuk");
    model.addColumn("Mulai Kontrak");
    model.addColumn("Akhir Kontrak");
    model.addColumn("Status Kontrak");
    
    tabelKaryawan.setModel(model);
    
    // Set column widths (adjust as needed)
    tabelKaryawan.getColumnModel().getColumn(0).setPreferredWidth(40);   // No
    tabelKaryawan.getColumnModel().getColumn(1).setPreferredWidth(80);   // Kode
    tabelKaryawan.getColumnModel().getColumn(2).setPreferredWidth(150);  // Nama
    tabelKaryawan.getColumnModel().getColumn(3).setPreferredWidth(120);  // No KTP
    tabelKaryawan.getColumnModel().getColumn(4).setPreferredWidth(100);  // No HP
    tabelKaryawan.getColumnModel().getColumn(5).setPreferredWidth(200);  // Alamat
    tabelKaryawan.getColumnModel().getColumn(6).setPreferredWidth(120);  // Jabatan
    tabelKaryawan.getColumnModel().getColumn(7).setPreferredWidth(120);  // Dept
    tabelKaryawan.getColumnModel().getColumn(8).setPreferredWidth(80);   // Status
    tabelKaryawan.getColumnModel().getColumn(9).setPreferredWidth(100);  // Tgl Masuk
    tabelKaryawan.getColumnModel().getColumn(10).setPreferredWidth(100); // Mulai Kontrak
    tabelKaryawan.getColumnModel().getColumn(11).setPreferredWidth(100); // Akhir Kontrak
    tabelKaryawan.getColumnModel().getColumn(12).setPreferredWidth(100); // Status Kontrak
    
    // Enable horizontal scrolling
    tabelKaryawan.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    
    // Set row height
    tabelKaryawan.setRowHeight(25);
}
   
    private void resetForm() {
        // Clear text fields
        tambahNama.setText("");
        tambahKD.setText("");
        tambahNoKtp.setText("");
        tambahNoHp.setText("");
        tambahAlamat.setText("");

        // Reset combo boxes
        tambahJabatan.setSelectedIndex(0);
        tambahDepartemen.setSelectedIndex(0);
        tambahStatus.setSelectedIndex(0);
        statusKontrak.setSelectedIndex(0);

        // Reset date pickers
        tanggalMasuk.setDate(null);
        tanggalMulai.setDate(null);
        tanggalAkhir.setDate(null);

        

        // Reset focus
        tambahNama.requestFocusInWindow();
    }

   private void searchData() {
    String keyword = txtSearch.getText();
    KaryawanController karyawanController = new KaryawanController();
    List<Karyawan> karyawans = karyawanController.searchKaryawans(keyword);

    DefaultTableModel model = (DefaultTableModel) tabelKaryawan.getModel();
    model.setRowCount(0);

    int no = 1;
    for (Karyawan karyawan : karyawans) {
        model.addRow(new Object[]{
            no++,
            karyawan.getKdKaryawan(),
            karyawan.getNama(),
            karyawan.getNoKtp(),
            karyawan.getNoHp(),
            karyawan.getAlamat(),
            karyawan.getJabatan(),
            karyawan.getDepartemen(),
            karyawan.getStatus(),
            karyawan.getTanggalMasuk(),
            karyawan.getTanggalMulaiKontrak(),
            karyawan.getTanggalBerakhirKontrak(),
            karyawan.getStatusKontrak(),
        });
    }
}

    private void insertData() {
    try {
        // Get values
        String nama = tambahNama.getText();
        String kdKaryawan = tambahKD.getText();
        String noKtp = tambahNoKtp.getText();
        String noHp = tambahNoHp.getText();
        String alamat = tambahAlamat.getText();
        
        
        Jabatan selectedJabatan = (Jabatan) tambahJabatan.getSelectedItem();
        Departemen selectedDepartemen = (Departemen) tambahDepartemen.getSelectedItem();
        String status = (String) tambahStatus.getSelectedItem();
        String kontrakStatus = (String) statusKontrak.getSelectedItem();

        // Validate selections
        if (selectedJabatan == null || selectedDepartemen == null ) {
            JOptionPane.showMessageDialog(this, "Pilih Jabatan, Departemen dan User!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get and validate dates
        LocalDate tanggalMasukDate = tanggalMasuk.getDate();
        LocalDate tanggalMulaiDate = tanggalMulai.getDate();
        LocalDate tanggalAkhirDate = tanggalAkhir.getDate();

        if (tanggalMasukDate == null || tanggalMulaiDate == null || tanggalAkhirDate == null) {
            JOptionPane.showMessageDialog(this, "Semua tanggal harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create Karyawan
        Karyawan karyawan = new Karyawan();
        karyawan.setKdKaryawan(kdKaryawan);
        karyawan.setNama(nama);
        karyawan.setNoKtp(noKtp);
        karyawan.setNoHp(noHp);
        karyawan.setAlamat(alamat);
        
        karyawan.setJabatanId(selectedJabatan.getIdJabatan());
        karyawan.setDepartemenId(selectedDepartemen.getId());
        
        karyawan.setStatus(status);
        
        karyawan.setTanggalMasuk(Date.from(tanggalMasukDate.atStartOfDay(ZoneId.systemDefault()).toInstant()));
        karyawan.setTanggalMulaiKontrak(Date.from(tanggalMulaiDate.atStartOfDay(ZoneId.systemDefault()).toInstant()));
        karyawan.setTanggalBerakhirKontrak(Date.from(tanggalAkhirDate.atStartOfDay(ZoneId.systemDefault()).toInstant()));
        karyawan.setStatusKontrak(kontrakStatus);
        // Save
        KaryawanController controller = new KaryawanController();
        if (controller.insertKaryawan(karyawan)) {
            JOptionPane.showMessageDialog(this, "Karyawan berhasil ditambahkan!");
            loadKaryawans();
            showPanelView();
            btnTambah.setText("Tambah");
        } else {
            JOptionPane.showMessageDialog(this, "Gagal menambahkan Karyawan.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}
    
    private void updateData() {
    try {
        // Get values from form
        String nama = tambahNama.getText();
        String kdKaryawan = tambahKD.getText();
        String noKtp = tambahNoKtp.getText();
        String noHp = tambahNoHp.getText();
        String alamat = tambahAlamat.getText();
        
        Jabatan selectedJabatan = (Jabatan) tambahJabatan.getSelectedItem();
        Departemen selectedDepartemen = (Departemen) tambahDepartemen.getSelectedItem();
        String status = (String) tambahStatus.getSelectedItem();
        String kontrakStatus = (String) statusKontrak.getSelectedItem();
        

        // Validate selections
        if (selectedJabatan == null || selectedDepartemen == null ) {
            JOptionPane.showMessageDialog(this, "Pilih Jabatan dan Departemen !", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate dates
        LocalDate tanggalMasukDate = tanggalMasuk.getDate();
        LocalDate tanggalMulaiDate = tanggalMulai.getDate();
        LocalDate tanggalAkhirDate = tanggalAkhir.getDate();

        if (tanggalMasukDate == null || tanggalMulaiDate == null || tanggalAkhirDate == null) {
            JOptionPane.showMessageDialog(this, "Semua tanggal harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create Karyawan object with updated data
        Karyawan karyawan = new Karyawan();
        karyawan.setKdKaryawan(kdKaryawan);
        karyawan.setNama(nama);
        karyawan.setNoKtp(noKtp);
        karyawan.setNoHp(noHp);
        karyawan.setAlamat(alamat);
        karyawan.setJabatanId(selectedJabatan.getIdJabatan());
        karyawan.setDepartemenId(selectedDepartemen.getId());
        karyawan.setStatus(status);
        karyawan.setStatusKontrak(kontrakStatus);
        karyawan.setTanggalMasuk(Date.from(tanggalMasukDate.atStartOfDay(ZoneId.systemDefault()).toInstant()));
        karyawan.setTanggalMulaiKontrak(Date.from(tanggalMulaiDate.atStartOfDay(ZoneId.systemDefault()).toInstant()));
        karyawan.setTanggalBerakhirKontrak(Date.from(tanggalAkhirDate.atStartOfDay(ZoneId.systemDefault()).toInstant()));

        // Update data
        KaryawanController controller = new KaryawanController();
        if (controller.updateKaryawan(karyawan)) {
            JOptionPane.showMessageDialog(this, "Data Karyawan berhasil Diubah!");
            loadKaryawans();
            showPanelView();
            resetForm();
        } else {
            JOptionPane.showMessageDialog(this, "Gagal Mengubah Data Karyawan.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

    private void deleteData() {
    int selectedRow = tabelKaryawan.getSelectedRow();
    int confirm = JOptionPane.showConfirmDialog(this, "Apakah anda ingin menghapus data ini ?",
            "Konfirmasi Hapus Data", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        try {
            // Column 1 is now kdKaryawan (column 0 is the number)
            String kdKaryawan = tabelKaryawan.getValueAt(selectedRow, 1).toString();
           
            KaryawanController karyawanController = new KaryawanController();
            boolean success = karyawanController.deleteKaryawan(kdKaryawan);

            if (success) {
                JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
                loadKaryawans(); 
                resetForm(); 
                showPanelView();
                btnTambah.setText("Tambah");
            } else {
                JOptionPane.showMessageDialog(this, "Gagal menghapus data, Hapus data dahulu yang ada di Transaksi.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
    private void loadComboJabatan() {
        JabatanController controller = new JabatanController();
        List<Jabatan> jabatanList = controller.getAllJabatan();

        tambahJabatan.removeAllItems();
        //tambahJabatan.addItem(new Jabatan()); // Opsi kosong
        for (Jabatan j : jabatanList) {
            tambahJabatan.addItem(j); // Add the object, not the string
        }
    }

    private void loadComboDepartemen() {
        DepartemenController controller = new DepartemenController();
        List<Departemen> departemenList = controller.getAllDepartemen();

        tambahDepartemen.removeAllItems();
        //tambahDepartemen.addItem(new Departemen()); // Opsi kosong
        for (Departemen d : departemenList) {
            tambahDepartemen.addItem(d); // Add the object
        }
    }

    private void loadComboStatus() {
            tambahStatus.removeAllItems();
            tambahStatus.addItem("Aktif");
            tambahStatus.addItem("Tidak Aktif");
     }

    private void loadComboStatusKontrak() {
            statusKontrak.removeAllItems();
            statusKontrak.addItem("Aktif");
            statusKontrak.addItem("Berakhir");
        }

    private void dataTable() {
    panelView.setVisible(false);
    panelAdd.setVisible(true);

    int row = tabelKaryawan.getSelectedRow();
    if (row < 0) {
        JOptionPane.showMessageDialog(this, "Pilih data karyawan terlebih dahulu!");
        return;
    }

    jLabel4.setText("Ubah Data Karyawan");

    // Note: Column 0 is now the number, so we start from column 1 for data
    tambahKD.setText(tabelKaryawan.getValueAt(row, 1).toString());
    // Set basic fields
    tambahNama.setText(tabelKaryawan.getValueAt(row, 2).toString());
    tambahNoKtp.setText(tabelKaryawan.getValueAt(row, 3).toString());
    tambahNoHp.setText(tabelKaryawan.getValueAt(row, 4).toString());
    tambahAlamat.setText(tabelKaryawan.getValueAt(row, 5).toString());

    // Set combo boxes
    setComboFromTable(tambahJabatan, tabelKaryawan.getValueAt(row, 6).toString());
    setComboFromTable(tambahDepartemen, tabelKaryawan.getValueAt(row, 7).toString());
    setComboFromTable(tambahStatus, tabelKaryawan.getValueAt(row, 8).toString());
    setComboFromTable(statusKontrak, tabelKaryawan.getValueAt(row, 12).toString());

    // Set dates
    try {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        // Handle possible null dates
        if (tabelKaryawan.getValueAt(row, 9) != null) {
            Date tglMasuk = sdf.parse(tabelKaryawan.getValueAt(row, 9).toString());
            tanggalMasuk.setDate(tglMasuk.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        }

        if (tabelKaryawan.getValueAt(row, 10) != null) {
            Date tglMulai = sdf.parse(tabelKaryawan.getValueAt(row, 10).toString());
            tanggalMulai.setDate(tglMulai.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        }

        if (tabelKaryawan.getValueAt(row, 11) != null) {
            Date tglAkhir = sdf.parse(tabelKaryawan.getValueAt(row, 11).toString());
            tanggalAkhir.setDate(tglAkhir.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error parsing dates: " + ex.getMessage());
        ex.printStackTrace();
    }

    btnSimpan.setText("Perbarui");
}
    private void setComboFromTable(JComboBox<?> combo, String value) {
        for (int i = 0; i < combo.getItemCount(); i++) {
            Object item = combo.getItemAt(i);
            String displayValue = item.toString(); // Works for both String and objects with toString()
            if (displayValue.equalsIgnoreCase(value)) {
                combo.setSelectedIndex(i);
                return;
            }
        }
        // If not found, select first item or none
        if (combo.getItemCount() > 0) {
            combo.setSelectedIndex(0);
        }
    }
    
    private String generateKodeKaryawan() {
        KaryawanController controller = new KaryawanController();
        String lastKode = controller.getLastKodeKaryawan();

        if (lastKode == null || lastKode.isEmpty()) {
            return "KRW-001"; // If no employees exist yet
        }

        try {
            // Extract the numeric part
            String numericPart = lastKode.split("-")[1];
            int number = Integer.parseInt(numericPart);

            // Increment and format with leading zeros
            return String.format("KRW-%03d", number + 1);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error generating employee code: " + e.getMessage());
            return "KRW-001"; // Fallback
        }
    }



}
