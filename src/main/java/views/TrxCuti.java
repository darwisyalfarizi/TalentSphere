/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views;


import controllers.CutiController;

import controllers.KaryawanController;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.Cuti;
import models.Karyawan;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;


/**
 *
 * @author darwisy
 */
public class TrxCuti extends javax.swing.JPanel {

    /**
     * Creates new form User
     */
    public TrxCuti() {
        initComponents();
        setTableCuti();
        loadCuti();
        loadComboStatus();
        loadComboKaryawan();
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        panelMain = new javax.swing.JPanel();
        panelView = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelCuti = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnTambah = new javax.swing.JButton();
        btnBatal = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAjukanCuti = new javax.swing.JButton();
        panelAdd = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnSimpan = new javax.swing.JButton();
        btnTambahBatal = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnTambahReset = new javax.swing.JButton();
        tambahTanggalM = new com.github.lgooddatepicker.components.DatePicker();
        jLabel5 = new javax.swing.JLabel();
        status = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tambahKeterangan = new javax.swing.JTextArea();
        tambahStatus = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tambahTanggalS = new com.github.lgooddatepicker.components.DatePicker();
        jLabel9 = new javax.swing.JLabel();
        tambahKaryawan = new javax.swing.JComboBox<>();
        tambahKdCuti = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.CardLayout());

        panelMain.setLayout(new java.awt.CardLayout());

        panelView.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Transaksi> Cuti");
        jLabel1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel2.setText("Data Cuti");
        jLabel2.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N

        tabelCuti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelCuti.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tabelCuti.setGridColor(new java.awt.Color(204, 204, 204));
        tabelCuti.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelCutiMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelCuti);

        txtSearch.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSearch.setText("Search...");
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        btnTambah.setText("Tambah");
        btnTambah.setBackground(new java.awt.Color(81, 108, 248));
        btnTambah.setBorder(null);
        btnTambah.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnTambah.setForeground(new java.awt.Color(255, 255, 255));
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnBatal.setText("Batal");
        btnBatal.setBackground(new java.awt.Color(248, 173, 80));
        btnBatal.setBorder(null);
        btnBatal.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnBatal.setForeground(new java.awt.Color(255, 255, 255));
        btnBatal.setPreferredSize(new java.awt.Dimension(62, 22));
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });

        btnDelete.setText("Hapus");
        btnDelete.setBackground(new java.awt.Color(248, 80, 108));
        btnDelete.setBorder(null);
        btnDelete.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setPreferredSize(new java.awt.Dimension(62, 22));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAjukanCuti.setText("Ajukan Cuti");
        btnAjukanCuti.setBackground(new java.awt.Color(0, 0, 0));
        btnAjukanCuti.setBorder(null);
        btnAjukanCuti.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnAjukanCuti.setForeground(new java.awt.Color(255, 255, 255));
        btnAjukanCuti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAjukanCutiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelViewLayout = new javax.swing.GroupLayout(panelView);
        panelView.setLayout(panelViewLayout);
        panelViewLayout.setHorizontalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelViewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelViewLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelViewLayout.createSequentialGroup()
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnAjukanCuti, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelViewLayout.createSequentialGroup()
                                .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelViewLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelViewLayout.createSequentialGroup()
                                .addGap(430, 430, 430)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(20, 20, 20))
        );
        panelViewLayout.setVerticalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAjukanCuti, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        panelMain.add(panelView, "card9");

        panelAdd.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setText("Transaksi > Cuti");
        jLabel3.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel4.setText("Tambah Data Cuti");
        jLabel4.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N

        btnSimpan.setText("Simpan");
        btnSimpan.setBackground(new java.awt.Color(81, 108, 248));
        btnSimpan.setBorder(null);
        btnSimpan.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnSimpan.setForeground(new java.awt.Color(255, 255, 255));
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnTambahBatal.setBackground(new java.awt.Color(248, 173, 80));
        btnTambahBatal.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnTambahBatal.setForeground(new java.awt.Color(255, 255, 255));
        btnTambahBatal.setText("Batal");
        btnTambahBatal.setBorder(null);
        btnTambahBatal.setMaximumSize(new java.awt.Dimension(90, 28));
        btnTambahBatal.setMinimumSize(new java.awt.Dimension(90, 28));
        btnTambahBatal.setPreferredSize(new java.awt.Dimension(90, 28));
        btnTambahBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahBatalActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 371, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 521, Short.MAX_VALUE)
        );

        btnTambahReset.setBackground(new java.awt.Color(51, 51, 51));
        btnTambahReset.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnTambahReset.setForeground(new java.awt.Color(255, 255, 255));
        btnTambahReset.setText("Reset");
        btnTambahReset.setBorder(null);
        btnTambahReset.setMaximumSize(new java.awt.Dimension(90, 28));
        btnTambahReset.setMinimumSize(new java.awt.Dimension(90, 28));
        btnTambahReset.setPreferredSize(new java.awt.Dimension(90, 28));
        btnTambahReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahResetActionPerformed(evt);
            }
        });

        jLabel5.setText("Kode Cuti");
        jLabel5.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        status.setText("Status");
        status.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahKeterangan.setColumns(20);
        tambahKeterangan.setRows(5);
        jScrollPane2.setViewportView(tambahKeterangan);

        tambahStatus.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel7.setText("Tanggal Mulai");
        jLabel7.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel6.setText("Keterangan");
        jLabel6.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel8.setText("Tanggal Selesai");
        jLabel8.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel9.setText("Nama Karyawan");
        jLabel9.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahKaryawan.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahKdCuti.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tambahStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(tambahTanggalM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                            .addComponent(jLabel8)
                            .addComponent(tambahTanggalS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tambahKaryawan, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tambahKdCuti))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 556, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                        .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(btnTambahReset, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(btnTambahBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(20, 20, 20))
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTambahBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTambahReset, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahKdCuti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahKaryawan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahTanggalM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahTanggalS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(status)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        panelMain.add(panelAdd, "card9");

        add(panelMain, "card9");
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        String currentText = btnSimpan.getText();

        switch (currentText) {
            case "Tambah":
                btnSimpan.setText("Simpan");
                break;
            case "Simpan":
                insertData();
                break;

            case "Perbarui":
                updateData();
                break;
        }
        
        
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        panelMain.removeAll();
        panelMain.add(panelAdd);
        panelMain.repaint();
        panelMain.revalidate();
        
        
        if (btnTambah.getText().equals("Ubah")) {
            dataTable(); 
            btnSimpan.setText("Perbarui");
            tambahKdCuti.setEditable(false);
        } else {
            resetForm(); 
            btnSimpan.setText("Simpan");
            tambahKdCuti.setText(generateKodeCuti());
            tambahKdCuti.setEditable(false);
        }

    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnTambahBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahBatalActionPerformed
        showPanelView();
        loadCuti();
        resetForm();
        if(btnTambah.getText().equals("Ubah")){
            btnTambah.setText("Tambah");
        }
    }//GEN-LAST:event_btnTambahBatalActionPerformed

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        searchData();
    }//GEN-LAST:event_txtSearchKeyTyped

    private void btnTambahResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahResetActionPerformed
        resetForm();
    }//GEN-LAST:event_btnTambahResetActionPerformed

    private void tabelCutiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelCutiMouseClicked
        if(btnTambah.getText().equals("Tambah")){
            btnTambah.setText("Ubah");
        }
        btnBatal.setVisible(true);
        btnDelete.setVisible(true);
        btnAjukanCuti.setVisible(true);
    }//GEN-LAST:event_tabelCutiMouseClicked

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        showPanelView();
        loadCuti();
        resetForm();
         if(btnTambah.getText().equals("Ubah")){
            btnTambah.setText("Tambah");
        }
    }//GEN-LAST:event_btnBatalActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteData();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAjukanCutiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAjukanCutiActionPerformed
      try {
    // 1. Prepare parameters
    Map<String, Object> parameter = new HashMap<String, Object>();
    
    // Get selected leave ID from table
    String selectedKdCuti = tabelCuti.getValueAt(tabelCuti.getSelectedRow(), 0).toString().trim();
    System.out.println("Debug - Selected kd_cuti: " + selectedKdCuti);
    parameter.put("kd_cuti", selectedKdCuti);

    // 2. Database connection
    Class.forName("com.mysql.cj.jdbc.Driver");
    Connection conn = DriverManager.getConnection(
        "jdbc:mysql://localhost:3306/talent_sphere2",
        "root", 
        ""
    );



    String reportPath = "C:\\Users\\darwi\\Documents\\NetBeansProjects\\TalentSphere\\report\\PengajuanCuti.jrxml";
    JasperReport jr = JasperCompileManager.compileReport(reportPath);
    JasperPrint jp = JasperFillManager.fillReport(jr, parameter, conn);

    if (jp.getPages().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Report generated but empty for leave ID: " + selectedKdCuti);
    } else {
        JasperViewer viewer = new JasperViewer(jp, false);
        viewer.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        viewer.setVisible(true);
    }

    conn.close();
} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();
}
    }//GEN-LAST:event_btnAjukanCutiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAjukanCuti;
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnTambahBatal;
    private javax.swing.JButton btnTambahReset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelView;
    private javax.swing.JLabel status;
    private javax.swing.JTable tabelCuti;
    private javax.swing.JComboBox<Karyawan> tambahKaryawan;
    private javax.swing.JTextField tambahKdCuti;
    private javax.swing.JTextArea tambahKeterangan;
    private javax.swing.JComboBox<String> tambahStatus;
    private com.github.lgooddatepicker.components.DatePicker tambahTanggalM;
    private com.github.lgooddatepicker.components.DatePicker tambahTanggalS;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    
    private void showPanelView(){
        panelMain.removeAll();
        panelMain.add(panelView);
        btnBatal.setVisible(false);
        btnDelete.setVisible(false);
        btnAjukanCuti.setVisible(false);
        panelMain.repaint();
        panelMain.revalidate();
    }
    
    private void loadCuti() {
           
        btnBatal.setVisible(false);
        btnDelete.setVisible(false);
        btnAjukanCuti.setVisible(false);
        CutiController cutiController = new CutiController();
        List<Cuti> cutis = cutiController.getAllCuti();
        
        DefaultTableModel model = (DefaultTableModel)tabelCuti.getModel(); 
        model.setRowCount(0);
        
        if (cutis != null) {
            for (Cuti cuti : cutis) {
                model.addRow(new Object[]{
                    cuti.getKdCuti(),
                    cuti.getKaryawan(),
                    cuti.getTanggalMulai(),
                    cuti.getTanggalSelesai(),
                    cuti.getKeterangan(),
                    cuti.getStatus(),
                    
                });
            }
        }

        
    }

    private void setTableCuti() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Kode Cuti");
        model.addColumn("Nama Karyawan");
        model.addColumn("Tanggal Mulai");
        model.addColumn("Tanggal Selesai");
        model.addColumn("Keterangan");
        model.addColumn("Status");
        
        tabelCuti.setModel(model);
        
    }

    private void resetForm() {
         
        
        tambahKeterangan.setText("");
        // Reset combo boxes
        
        tambahStatus.setSelectedIndex(0);
        tambahKaryawan.setSelectedIndex(0);
        // Reset date pickers
        tambahTanggalM.setDate(null);
       
        // Reset focus
        tambahKdCuti.requestFocusInWindow();
    }
    
    private void searchData() {
        String keyword = txtSearch.getText();
        CutiController cutiController = new CutiController();
        List<Cuti> cutis = cutiController.searchCutis(keyword); 

        DefaultTableModel model = (DefaultTableModel) tabelCuti.getModel();
        model.setRowCount(0);

        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

        for (Cuti cuti : cutis) {
            model.addRow(new Object[]{
                cuti.getKdCuti(), 
                cuti.getKaryawan(),
                cuti.getTanggalMulai() != null ? dateFormat.format(cuti.getTanggalMulai()) : "",
                cuti.getTanggalSelesai() != null ? dateFormat.format(cuti.getTanggalSelesai()) : "",
                cuti.getKeterangan(),
                cuti.getStatus()
            });
        }
    }

     
private void dataTable() {
    panelView.setVisible(false);
    panelAdd.setVisible(true);
    
    int row = tabelCuti.getSelectedRow();
    if (row < 0) {
        JOptionPane.showMessageDialog(this, "Pilih data karyawan terlebih dahulu!");
        return;
    }

    jLabel4.setText("Ubah Data Cuti");

    // Get ID from hidden column
    String kd = tabelCuti.getValueAt(row, 0).toString();
    tambahKdCuti.setText(String.valueOf(kd));


    // Set basic fields
    tambahKeterangan.setText(tabelCuti.getValueAt(row, 4).toString());

    // Set combo boxes
    setComboFromTable(tambahKaryawan, tabelCuti.getValueAt(row, 1).toString());
    setComboFromTable(tambahStatus, tabelCuti.getValueAt(row, 5).toString());
    

    // Set dates
    try {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        
        // Handle possible null dates
        if (tabelCuti.getValueAt(row, 2) != null) {
            Date tgl = sdf.parse(tabelCuti.getValueAt(row, 2).toString());
            tambahTanggalM.setDate(tgl.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            
        }
        if (tabelCuti.getValueAt(row, 3) != null) {
            Date tgl = sdf.parse(tabelCuti.getValueAt(row, 3).toString());
            tambahTanggalS.setDate(tgl.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            
        }
        
        
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error parsing dates: " + ex.getMessage());
        ex.printStackTrace();
    }

    btnSimpan.setText("Perbarui");
}
    
    private void insertData() {
    try {
        // Get values
        String kd = tambahKdCuti.getText();
        String keterangan = tambahKeterangan.getText();
        Karyawan selectedKaryawan = (Karyawan) tambahKaryawan.getSelectedItem();
        String status = (String) tambahStatus.getSelectedItem();

        // Validate
        if (selectedKaryawan == null || tambahTanggalM.getDate() == null || tambahTanggalS.getDate() == null) {
            JOptionPane.showMessageDialog(this, 
                "Pilih Karyawan dan tanggal!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

                System.out.println("Selected Karyawan Code: " + selectedKaryawan.getKdKaryawan());

        Cuti cuti = new Cuti();
        
        cuti.setKdCuti(kd);
        cuti.setKdKaryawan(selectedKaryawan.getKdKaryawan()); // Use setKdKaryawan directly
        cuti.setStatus(status);
        cuti.setKeterangan(keterangan);
        
        
        // Convert LocalDate to java.sql.Date
        LocalDate localDateM = tambahTanggalM.getDate();
        java.sql.Date sqlDateM = java.sql.Date.valueOf(localDateM);
        
        LocalDate localDateS = tambahTanggalS.getDate();
        java.sql.Date sqlDateS = java.sql.Date.valueOf(localDateS);
        
        cuti.setTanggalMulai(sqlDateM);
        cuti.setTanggalSelesai(sqlDateS);

        // Save
        CutiController controller = new CutiController();
        if (controller.insertCuti(cuti)) {
            JOptionPane.showMessageDialog(this, "Cuti berhasil ditambahkan!");
            loadCuti();
            showPanelView();
            btnTambah.setText("Tambah");
        } else {
            JOptionPane.showMessageDialog(this, "Gagal menambahkan Cuti.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}
    
    
 private void updateData() {
    try {
        // Get values
        String kdStr = tambahKdCuti.getText();
        String keterangan = tambahKeterangan.getText();
        Karyawan selectedKaryawan = (Karyawan) tambahKaryawan.getSelectedItem();
        String status = (String) tambahStatus.getSelectedItem();

        // Validate
        if (selectedKaryawan == null || tambahTanggalM.getDate() == null || tambahTanggalM.getDate() == null || kdStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Data tidak lengkap! Pastikan memilih karyawan, tanggal dan ID tersedia", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        
        Cuti cuti = new Cuti();
        cuti.setKdCuti(kdStr); 
        cuti.setKeterangan(keterangan);
        cuti.setKdKaryawan(selectedKaryawan.getKdKaryawan());
        cuti.setStatus(status);
        
        // Convert LocalDate to java.sql.Date
        LocalDate localDateM = tambahTanggalM.getDate();
        java.sql.Date sqlDateM = java.sql.Date.valueOf(localDateM);
        
        LocalDate localDateS = tambahTanggalS.getDate();
        java.sql.Date sqlDateS = java.sql.Date.valueOf(localDateS);
        
        cuti.setTanggalMulai(sqlDateM);
        cuti.setTanggalSelesai(sqlDateS);

        // Update
        CutiController controller = new CutiController();
        if (controller.updateCuti(cuti)) {
            JOptionPane.showMessageDialog(this, "Cuti berhasil diperbarui!");
            loadCuti();
            showPanelView();
            btnTambah.setText("Tambah");
        } else {
            JOptionPane.showMessageDialog(this, 
                "Gagal memperbarui cuti. Periksa data atau koneksi database.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}
 
 
 private void deleteData() {
        int selectedRow = tabelCuti.getSelectedRow();
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah anda ingin menghapus data ini ?",
                "Konfirmasi Hapus Data", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                
                String kdStr = tabelCuti.getValueAt(selectedRow, 0).toString();
                

                CutiController cutiController = new CutiController();
                boolean success = cutiController.deleteCuti(kdStr);

                if (success) {
                    JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
                    loadCuti(); 
                    resetForm(); 
                    showPanelView();
                    btnTambah.setText("Tambah");

                } else {
                    JOptionPane.showMessageDialog(this, "Gagal menghapus data.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
private void loadComboKaryawan() {
    KaryawanController controller = new KaryawanController();
    List<Karyawan> karyawanList = controller.getAllKaryawan();

    tambahKaryawan.removeAllItems();
    for (Karyawan karyawan : karyawanList) {
        tambahKaryawan.addItem(karyawan); // Add the object
    }
}
   private void loadComboStatus() {
        tambahStatus.removeAllItems();
        tambahStatus.addItem("Menunggu");
        tambahStatus.addItem("Disetujui");
        tambahStatus.addItem("Ditolak");
 }


   
   
   private void setComboFromTable(JComboBox<?> combo, String value) {
    for (int i = 0; i < combo.getItemCount(); i++) {
        Object item = combo.getItemAt(i);
        String displayValue = item.toString(); // Works for both String and objects with toString()
        if (displayValue.equalsIgnoreCase(value)) {
            combo.setSelectedIndex(i);
            return;
        }
    }
    // If not found, select first item or none
    if (combo.getItemCount() > 0) {
        combo.setSelectedIndex(0);
    }
}

    private String generateKodeCuti() {
         CutiController controller = new CutiController();
        String lastKode = controller.getLastKodeCuti();

        if (lastKode == null || lastKode.isEmpty()) {
            return "CTI-001"; // If no employees exist yet
        }

        try {
            // Extract the numeric part
            String numericPart = lastKode.split("-")[1];
            int number = Integer.parseInt(numericPart);

            // Increment and format with leading zeros
            return String.format("CTI-%03d", number + 1);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error generating employee code: " + e.getMessage());
            return "CTI-001"; // Fallback
        }
    }

    
    

}
