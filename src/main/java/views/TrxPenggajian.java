/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views;




import controllers.JabatanController;
import controllers.KaryawanController;
import controllers.SlipGajiController;
import controllers.DetailGajiController;
import java.awt.Component;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.DetailGaji;
import models.Jabatan;
import models.Karyawan;
import models.SlipGaji;
import java.sql.Connection;
import java.sql.DriverManager;
import javax.swing.JFrame;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author darwisy
 */
public class TrxPenggajian extends javax.swing.JPanel {

    /**
     * Creates new form User
     */
    public TrxPenggajian() {
        initComponents();
        setTableGaji();
        setTableDetailGaji();
        loadGaji();
        loadDetailGaji();
        loadComboKaryawan();
        loadComboSlip();
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        panelMain = new javax.swing.JPanel();
        panelView = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnTambah = new javax.swing.JButton();
        btnBatal = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSlip = new javax.swing.JTable();
        btnSlip = new javax.swing.JButton();
        panelAdd = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnSimpan = new javax.swing.JButton();
        btnTambahBatal = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        tambahKD = new javax.swing.JTextField();
        tambahKaryawan = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        tambahGajiPokok = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tambahPeriode = new com.github.lgooddatepicker.components.DatePicker();
        btnTambahGaji = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        btnTambahReset = new javax.swing.JButton();
        panelAddMin = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnTambahBatal1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        tambahKdDetail = new javax.swing.JTextField();
        tambahKaryawanP = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        tambahDeskripsi = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tambahJenis = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        tambahJumlah = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        isTambah0 = new javax.swing.JRadioButton();
        istambah1 = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDetailGaji = new javax.swing.JTable();
        searchKodeSlip = new javax.swing.JTextField();
        btnBatalDetail = new javax.swing.JButton();
        btnDeleteDetail = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        btnSimpan2 = new javax.swing.JButton();
        btnSimpan1 = new javax.swing.JButton();
        btnTambahReset1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.CardLayout());

        panelMain.setLayout(new java.awt.CardLayout());

        panelView.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Transaksi > Penggajian");
        jLabel1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel2.setText("Penggajian");
        jLabel2.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N

        txtSearch.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSearch.setText("Search...");
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        btnTambah.setText("Tambah");
        btnTambah.setBackground(new java.awt.Color(81, 108, 248));
        btnTambah.setBorder(null);
        btnTambah.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnTambah.setForeground(new java.awt.Color(255, 255, 255));
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnBatal.setText("Batal");
        btnBatal.setBackground(new java.awt.Color(248, 173, 80));
        btnBatal.setBorder(null);
        btnBatal.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnBatal.setForeground(new java.awt.Color(255, 255, 255));
        btnBatal.setPreferredSize(new java.awt.Dimension(62, 22));
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });

        btnDelete.setText("Hapus");
        btnDelete.setBackground(new java.awt.Color(248, 80, 108));
        btnDelete.setBorder(null);
        btnDelete.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setPreferredSize(new java.awt.Dimension(62, 22));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        tableSlip.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableSlip.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tableSlip.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSlipMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableSlip);

        btnSlip.setText("Slip Gaji");
        btnSlip.setBackground(new java.awt.Color(0, 0, 0));
        btnSlip.setBorder(null);
        btnSlip.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnSlip.setForeground(new java.awt.Color(255, 255, 255));
        btnSlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlipActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelViewLayout = new javax.swing.GroupLayout(panelView);
        panelView.setLayout(panelViewLayout);
        panelViewLayout.setHorizontalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelViewLayout.createSequentialGroup()
                                .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnSlip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelViewLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelViewLayout.createSequentialGroup()
                                .addGap(430, 430, 430)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(20, 20, 20))
        );
        panelViewLayout.setVerticalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSlip, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        panelMain.add(panelView, "card9");

        panelAdd.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setText("Transaksi > Penggajian");
        jLabel3.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel4.setText("Penggajian");
        jLabel4.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N

        btnSimpan.setText("Simpan");
        btnSimpan.setBackground(new java.awt.Color(81, 108, 248));
        btnSimpan.setBorder(null);
        btnSimpan.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnSimpan.setForeground(new java.awt.Color(255, 255, 255));
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnTambahBatal.setText("Batal");
        btnTambahBatal.setBackground(new java.awt.Color(248, 173, 80));
        btnTambahBatal.setBorder(null);
        btnTambahBatal.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnTambahBatal.setForeground(new java.awt.Color(255, 255, 255));
        btnTambahBatal.setMaximumSize(new java.awt.Dimension(90, 28));
        btnTambahBatal.setMinimumSize(new java.awt.Dimension(90, 28));
        btnTambahBatal.setPreferredSize(new java.awt.Dimension(90, 28));
        btnTambahBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahBatalActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setText("Karyawan");
        jLabel5.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahKD.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahKaryawan.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tambahKaryawan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahKaryawanActionPerformed(evt);
            }
        });

        jLabel7.setText("Gaji Pokok");
        jLabel7.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahGajiPokok.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tambahGajiPokok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahGajiPokokActionPerformed(evt);
            }
        });

        jLabel9.setText("Periode");
        jLabel9.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        btnTambahGaji.setText("Tambah Detail Gaji");
        btnTambahGaji.setBackground(new java.awt.Color(81, 108, 248));
        btnTambahGaji.setBorder(null);
        btnTambahGaji.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnTambahGaji.setForeground(new java.awt.Color(255, 255, 255));
        btnTambahGaji.setMaximumSize(new java.awt.Dimension(90, 28));
        btnTambahGaji.setMinimumSize(new java.awt.Dimension(90, 28));
        btnTambahGaji.setPreferredSize(new java.awt.Dimension(90, 28));
        btnTambahGaji.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahGajiActionPerformed(evt);
            }
        });

        jLabel6.setText("*Klik Simpan dahulu untuk membuat slip gaji");
        jLabel6.setFont(new java.awt.Font("Poppins", 0, 10)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));

        jLabel16.setText("Kode ");
        jLabel16.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tambahKaryawan, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addComponent(tambahGajiPokok)
                        .addComponent(jLabel9)
                        .addComponent(tambahPeriode, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addComponent(btnTambahGaji, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tambahKD))
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tambahKD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tambahKaryawan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tambahPeriode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tambahGajiPokok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(30, 30, 30)
                .addComponent(btnTambahGaji, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(196, Short.MAX_VALUE))
        );

        btnTambahReset.setBackground(new java.awt.Color(51, 51, 51));
        btnTambahReset.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnTambahReset.setForeground(new java.awt.Color(255, 255, 255));
        btnTambahReset.setText("Reset");
        btnTambahReset.setBorder(null);
        btnTambahReset.setMaximumSize(new java.awt.Dimension(90, 28));
        btnTambahReset.setMinimumSize(new java.awt.Dimension(90, 28));
        btnTambahReset.setPreferredSize(new java.awt.Dimension(90, 28));
        btnTambahReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 567, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddLayout.createSequentialGroup()
                        .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(btnTambahReset, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(btnTambahBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(20, 20, 20))
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTambahBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTambahReset, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelMain.add(panelAdd, "card9");

        panelAddMin.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setText("Transaksi > Penggajian");
        jLabel8.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel10.setText("Penggajian");
        jLabel10.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N

        btnTambahBatal1.setText("Batal");
        btnTambahBatal1.setBackground(new java.awt.Color(248, 173, 80));
        btnTambahBatal1.setBorder(null);
        btnTambahBatal1.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnTambahBatal1.setForeground(new java.awt.Color(255, 255, 255));
        btnTambahBatal1.setMaximumSize(new java.awt.Dimension(90, 28));
        btnTambahBatal1.setMinimumSize(new java.awt.Dimension(90, 28));
        btnTambahBatal1.setPreferredSize(new java.awt.Dimension(90, 28));
        btnTambahBatal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahBatal1ActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel11.setText("Kode - Periode");
        jLabel11.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahKdDetail.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tambahKdDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahKdDetailActionPerformed(evt);
            }
        });

        tambahKaryawanP.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tambahKaryawanP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahKaryawanPActionPerformed(evt);
            }
        });

        jLabel12.setText("Detail");
        jLabel12.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahDeskripsi.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tambahDeskripsi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahDeskripsiActionPerformed(evt);
            }
        });

        jLabel13.setText("Jenis");
        jLabel13.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahJenis.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tambahJenis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahJenisActionPerformed(evt);
            }
        });

        jLabel14.setText("Jumlah");
        jLabel14.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        tambahJumlah.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tambahJumlah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahJumlahActionPerformed(evt);
            }
        });

        jLabel15.setText("Deskripsi");
        jLabel15.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        isTambah0.setText("Pengurangan");
        isTambah0.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        istambah1.setText("Penambahan");
        istambah1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        istambah1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                istambah1ActionPerformed(evt);
            }
        });

        tableDetailGaji.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableDetailGaji.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tableDetailGaji.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDetailGajiMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableDetailGaji);

        searchKodeSlip.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        searchKodeSlip.setText("Search by kode slip");
        searchKodeSlip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchKodeSlipKeyTyped(evt);
            }
        });

        btnBatalDetail.setText("Batal");
        btnBatalDetail.setBackground(new java.awt.Color(248, 173, 80));
        btnBatalDetail.setBorder(null);
        btnBatalDetail.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnBatalDetail.setForeground(new java.awt.Color(255, 255, 255));
        btnBatalDetail.setPreferredSize(new java.awt.Dimension(62, 22));
        btnBatalDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalDetailActionPerformed(evt);
            }
        });

        btnDeleteDetail.setText("Hapus");
        btnDeleteDetail.setBackground(new java.awt.Color(248, 80, 108));
        btnDeleteDetail.setBorder(null);
        btnDeleteDetail.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnDeleteDetail.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteDetail.setPreferredSize(new java.awt.Dimension(62, 22));
        btnDeleteDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDetailActionPerformed(evt);
            }
        });

        jLabel17.setText("Kode Detail");
        jLabel17.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        btnSimpan2.setText("Perbarui");
        btnSimpan2.setBackground(new java.awt.Color(81, 108, 248));
        btnSimpan2.setBorder(null);
        btnSimpan2.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnSimpan2.setForeground(new java.awt.Color(255, 255, 255));
        btnSimpan2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpan2ActionPerformed(evt);
            }
        });

        btnSimpan1.setText("Simpan");
        btnSimpan1.setBackground(new java.awt.Color(81, 108, 248));
        btnSimpan1.setBorder(null);
        btnSimpan1.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnSimpan1.setForeground(new java.awt.Color(255, 255, 255));
        btnSimpan1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpan1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel15)
                                .addComponent(jLabel13)
                                .addComponent(tambahDeskripsi)
                                .addComponent(tambahJenis)
                                .addComponent(tambahKaryawanP, 0, 372, Short.MAX_VALUE)
                                .addComponent(tambahKdDetail))
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchKodeSlip, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(btnSimpan1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSimpan2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBatalDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(btnDeleteDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel12)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(istambah1)
                                .addGap(52, 52, 52)
                                .addComponent(isTambah0))
                            .addComponent(jLabel14)
                            .addComponent(tambahJumlah, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 827, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(istambah1)
                            .addComponent(isTambah0))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahJumlah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBatalDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSimpan2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSimpan1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahKdDetail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahKaryawanP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tambahJenis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(jLabel15)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(tambahDeskripsi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(searchKodeSlip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnTambahReset1.setText("Reset");
        btnTambahReset1.setBackground(new java.awt.Color(51, 51, 51));
        btnTambahReset1.setBorder(null);
        btnTambahReset1.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnTambahReset1.setForeground(new java.awt.Color(255, 255, 255));
        btnTambahReset1.setMaximumSize(new java.awt.Dimension(90, 28));
        btnTambahReset1.setMinimumSize(new java.awt.Dimension(90, 28));
        btnTambahReset1.setPreferredSize(new java.awt.Dimension(90, 28));
        btnTambahReset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahReset1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAddMinLayout = new javax.swing.GroupLayout(panelAddMin);
        panelAddMin.setLayout(panelAddMinLayout);
        panelAddMinLayout.setHorizontalGroup(
            panelAddMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddMinLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelAddMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddMinLayout.createSequentialGroup()
                        .addComponent(btnTambahReset1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(btnTambahBatal1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelAddMinLayout.createSequentialGroup()
                        .addGroup(panelAddMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddMinLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 567, Short.MAX_VALUE)
                                .addComponent(jLabel8)))
                        .addGap(20, 20, 20))))
        );
        panelAddMinLayout.setVerticalGroup(
            panelAddMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddMinLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelAddMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(panelAddMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTambahBatal1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTambahReset1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        panelMain.add(panelAddMin, "card9");

        add(panelMain, "card9");
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        String currentText = btnSimpan.getText();

        switch (currentText) {
            case "Tambah":
                btnSimpan.setText("Simpan");
                break;
            case "Simpan":
               insertData();
                break;

            case "Perbarui":
               updateData();
                break;
        }
        
        
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
    panelMain.removeAll();
        panelMain.add(panelAdd);
        panelMain.repaint();
        panelMain.revalidate();
        
        
        
        if (btnTambah.getText().equals("Ubah")) {
            dataTable(); 
            btnSimpan.setText("Perbarui");
        } else {
            resetForm(); 
            btnSimpan.setText("Simpan");
        }

    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnTambahBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahBatalActionPerformed
        showPanelView();
        loadGaji();
        resetForm();
        if(btnTambah.getText().equals("Ubah")){
            btnTambah.setText("Tambah");
        }
    }//GEN-LAST:event_btnTambahBatalActionPerformed

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        searchData();
    }//GEN-LAST:event_txtSearchKeyTyped

    private void btnTambahResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahResetActionPerformed
        resetForm();
    }//GEN-LAST:event_btnTambahResetActionPerformed

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        showPanelView();
        loadGaji();
        resetForm();
         if(btnTambah.getText().equals("Ubah")){
            btnTambah.setText("Tambah");
        }
    }//GEN-LAST:event_btnBatalActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteData();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tambahGajiPokokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahGajiPokokActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tambahGajiPokokActionPerformed

    private void btnTambahGajiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahGajiActionPerformed
        panelMain.removeAll();
        panelMain.add(panelAddMin);
        panelMain.repaint();
        panelMain.revalidate();
        
        loadComboSlip();
    }//GEN-LAST:event_btnTambahGajiActionPerformed

    private void tambahKaryawanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahKaryawanActionPerformed
        Karyawan selected = (Karyawan)tambahKaryawan.getSelectedItem();
    
        // First check if selected is not null
        if (selected == null) {
            tambahGajiPokok.setText("");
            tambahGajiPokok.revalidate();
            tambahGajiPokok.repaint();
            return;
        }

        System.out.printf("Selected - ID: %s, Nama: %s, JabatanID: %d%n",
            selected.getKdKaryawan(), 
            selected.getNama(), 
            selected.getJabatanId());

        // Check if kdKaryawan is not empty (instead of > 0)
        if (!selected.getKdKaryawan().isEmpty()) {
            loadGajiPokok(selected.getJabatanId());
        } else {
            tambahGajiPokok.setText("");
        }

        tambahGajiPokok.revalidate();
        tambahGajiPokok.repaint();
    }//GEN-LAST:event_tambahKaryawanActionPerformed

    private void tableSlipMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSlipMouseClicked
        if(btnTambah.getText().equals("Tambah")){
            btnTambah.setText("Ubah");
        }
        btnBatal.setVisible(true);
        btnDelete.setVisible(true);
        btnSlip.setVisible(true);
    }//GEN-LAST:event_tableSlipMouseClicked

    private void btnSimpan1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpan1ActionPerformed
        
       insertDataDetail();
       loadDetailGaji();
    }//GEN-LAST:event_btnSimpan1ActionPerformed

    private void btnTambahBatal1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahBatal1ActionPerformed
        showPanelView();
        loadGaji();
        resetForm();
        if(btnTambah.getText().equals("Ubah")){
            btnTambah.setText("Tambah");
        }
    }//GEN-LAST:event_btnTambahBatal1ActionPerformed

    private void tambahKaryawanPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahKaryawanPActionPerformed
//        Object selected = tambahKaryawanP.getSelectedItem();
//
//            if (!(selected instanceof SlipGaji)) {
//                clearDetailGajiTable();
//                return;
//            }
//
//            SlipGaji slip = (SlipGaji) selected;
//            loadDetailGaji(slip.getKdSlip());
    }//GEN-LAST:event_tambahKaryawanPActionPerformed

    private void tambahDeskripsiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahDeskripsiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tambahDeskripsiActionPerformed

    private void btnTambahReset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahReset1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTambahReset1ActionPerformed

    private void tambahJenisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahJenisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tambahJenisActionPerformed

    private void tambahJumlahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahJumlahActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tambahJumlahActionPerformed

    private void istambah1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_istambah1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_istambah1ActionPerformed

    private void searchKodeSlipKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKodeSlipKeyTyped
        searchDataDetail();
    }//GEN-LAST:event_searchKodeSlipKeyTyped

    private void btnBatalDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalDetailActionPerformed

        loadDetailGaji();
        resetDetailForm();
    }//GEN-LAST:event_btnBatalDetailActionPerformed

    private void btnDeleteDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDetailActionPerformed
        deleteDataDetail();
    }//GEN-LAST:event_btnDeleteDetailActionPerformed

    private void tableDetailGajiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDetailGajiMouseClicked
        dataTableDetail();
        btnBatal.setVisible(true);
        btnDelete.setVisible(true);
        btnSlip.setVisible(true);
    }//GEN-LAST:event_tableDetailGajiMouseClicked

    private void tambahKdDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahKdDetailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tambahKdDetailActionPerformed

    private void btnSimpan2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpan2ActionPerformed
        updateDataDetail();
        loadDetailGaji();
    }//GEN-LAST:event_btnSimpan2ActionPerformed

    private void btnSlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlipActionPerformed
        try {
            // 1. Prepare parameters
            Map<String, Object> parameter = new HashMap<String, Object>();

            // Get selected leave ID from table
            String selectedKdSlip = tableSlip.getValueAt(tableSlip.getSelectedRow(), 0).toString().trim();
            System.out.println("Debug - Selected kd_slip: " + selectedKdSlip);
            parameter.put("kd_slip", selectedKdSlip);

            // 2. Database connection
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/talent_sphere2",
                "root",
                ""
            );

            String reportPath = "C:\\Users\\darwi\\Documents\\NetBeansProjects\\TalentSphere\\report\\SlipGaji.jrxml";
            JasperReport jr = JasperCompileManager.compileReport(reportPath);
            JasperPrint jp = JasperFillManager.fillReport(jr, parameter, conn);

            if (jp.getPages().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Report generated but empty for leave ID: " + selectedKdSlip);
            } else {
                JasperViewer viewer = new JasperViewer(jp, false);
                viewer.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                viewer.setVisible(true);
            }

            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSlipActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnBatalDetail;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteDetail;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnSimpan1;
    private javax.swing.JButton btnSimpan2;
    private javax.swing.JButton btnSlip;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnTambahBatal;
    private javax.swing.JButton btnTambahBatal1;
    private javax.swing.JButton btnTambahGaji;
    private javax.swing.JButton btnTambahReset;
    private javax.swing.JButton btnTambahReset1;
    private javax.swing.JRadioButton isTambah0;
    private javax.swing.JRadioButton istambah1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JPanel panelAddMin;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelView;
    private javax.swing.JTextField searchKodeSlip;
    private javax.swing.JTable tableDetailGaji;
    private javax.swing.JTable tableSlip;
    private javax.swing.JTextField tambahDeskripsi;
    private javax.swing.JTextField tambahGajiPokok;
    private javax.swing.JTextField tambahJenis;
    private javax.swing.JTextField tambahJumlah;
    private javax.swing.JTextField tambahKD;
    private javax.swing.JComboBox<Karyawan> tambahKaryawan;
    private javax.swing.JComboBox<SlipGaji> tambahKaryawanP;
    private javax.swing.JTextField tambahKdDetail;
    private com.github.lgooddatepicker.components.DatePicker tambahPeriode;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    
    private void showPanelView(){
        panelMain.removeAll();
        panelMain.add(panelView);
        
        btnBatal.setVisible(false);
        btnDelete.setVisible(false);
        btnSlip.setVisible(false);
        
        panelMain.repaint();
        panelMain.revalidate();
    }
    
    private void loadGaji() {
           
        btnBatal.setVisible(false);
        btnDelete.setVisible(false);
        btnSlip.setVisible(false);
        SlipGajiController slipGajiController = new SlipGajiController();
        List<SlipGaji> slipgajis = slipGajiController.getAllSlipGaji();

        DefaultTableModel model = (DefaultTableModel)tableSlip.getModel(); 
        model.setRowCount(0);

        if (slipgajis != null) {
            for (SlipGaji slipgaji : slipgajis) {
                model.addRow(new Object[]{
                    slipgaji.getKdSlip(),
                    slipgaji.getKaryawan(),
                    slipgaji.getPeriode(),
                    slipgaji.getGajiPokok(),
                    slipgaji.getTotalTambahan(),
                    slipgaji.getTotalPengurangan(),
                    slipgaji.getGajiBersih()
                });
            }
        }
        
        

        
    }

    private void setTableGaji() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Kode Slip");
        model.addColumn("Nama Karyawan");
        model.addColumn("Periode");
        model.addColumn("Gaji Pokok");
        model.addColumn("Penambahan");
        model.addColumn("Pengurangan");
        model.addColumn("Total");

        tableSlip.setModel(model);

        // Optional: Set preferred column widths if needed
        tableSlip.getColumnModel().getColumn(0).setPreferredWidth(80); // Kode Slip
        tableSlip.getColumnModel().getColumn(1).setPreferredWidth(150); // Nama Karyawan
        tableSlip.getColumnModel().getColumn(2).setPreferredWidth(100);  // Periode
        tableSlip.getColumnModel().getColumn(3).setPreferredWidth(100); // Gaji Pokok
        tableSlip.getColumnModel().getColumn(4).setPreferredWidth(100); // Penambahan
        tableSlip.getColumnModel().getColumn(5).setPreferredWidth(100); // Pengurangan
        tableSlip.getColumnModel().getColumn(6).setPreferredWidth(120); // Total
    }

    private void resetForm() {
        tambahGajiPokok.setText("");
        tambahKD.setText("");
        tambahKaryawan.setSelectedIndex(0);
        tambahPeriode.setDate(null);
        tambahKaryawan.requestFocusInWindow();
    }
    
    private void searchData() {
        String keyword = txtSearch.getText();
        SlipGajiController slipGajiController = new SlipGajiController();
        List<SlipGaji> slipgajis = slipGajiController.searchSlipGajis(keyword);

        DefaultTableModel model = (DefaultTableModel) tableSlip.getModel();
        model.setRowCount(0);

        for (SlipGaji slipgaji : slipgajis) {
            model.addRow(new Object[]{
                slipgaji.getKdSlip(),
                
                    slipgaji.getKaryawan(),
                    slipgaji.getPeriode(),
                    slipgaji.getGajiPokok(),
                    slipgaji.getTotalTambahan(),
                    slipgaji.getTotalPengurangan(),
                    slipgaji.getGajiBersih()
            });
        }
    }

    private void dataTable(){
        panelView.setVisible(false);
        panelAdd.setVisible(true);
        
        int row = tableSlip.getSelectedRow();
        jLabel4.setText("Ubah Data Slip");
        
        tambahKD.setText(tableSlip.getValueAt(row, 0).toString());
        setComboFromTable(tambahKaryawan, tableSlip.getValueAt(row, 1).toString());
        tambahGajiPokok.setText(tableSlip.getValueAt(row, 3).toString());
       // Set dates
       
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            // Handle possible null dates
            if (tableSlip.getValueAt(row, 2) != null) {
                Date tgl = sdf.parse(tableSlip.getValueAt(row, 2).toString());
                tambahPeriode.setDate(tgl.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            }


        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error parsing dates: " + ex.getMessage());
            ex.printStackTrace();
        }

        btnSimpan.setText("Perbarui");

        
        
    }
    
    private void insertData() {
        try {
            // Get values
            String kode = tambahKD.getText(); 
            String gajiPokokText = tambahGajiPokok.getText().trim();
            Karyawan selectedKaryawan = (Karyawan) tambahKaryawan.getSelectedItem();

            // Validate
            if (selectedKaryawan == null || tambahPeriode.getDate() == null || gajiPokokText.isEmpty()) {
                JOptionPane.showMessageDialog(this, 
                    "Isi semua field dengan benar!", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Convert salary
            BigDecimal gajiPokok;
            try {
                gajiPokok = new BigDecimal(gajiPokokText.replaceAll("[.,]", ""));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, 
                    "Format gaji tidak valid!", 
                    "Error",    
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Create SlipGaji
            SlipGaji slipGaji = new SlipGaji();
            slipGaji.setKdSlip(kode);
            slipGaji.setGajiPokok(gajiPokok);
            
            slipGaji.setKdKaryawan(selectedKaryawan.getKdKaryawan());


            // Convert and set date
            LocalDate localDate = tambahPeriode.getDate();
            slipGaji.setPeriode(java.sql.Date.valueOf(localDate));

            // Save
            SlipGajiController controller = new SlipGajiController();
            if (controller.insertSlipGaji(slipGaji)) {
                JOptionPane.showMessageDialog(this, "Data berhasil disimpan!");
                loadGaji();
                showPanelView();
                btnTambah.setText("Tambah");
            } else {
                JOptionPane.showMessageDialog(this, "Gagal menyimpan data.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void loadComboKaryawan() {
        KaryawanController controller = new KaryawanController();
        List<Karyawan> karyawanList = controller.getAllKaryawanForComboBox();
         // Debug: Print loaded data
        System.out.println("Loaded karyawan data:");
        for (Karyawan k : karyawanList) {
            System.out.printf("KD: %s, Nama: %s, JabatanID: %d%n", 
                k.getKdKaryawan(), k.getNama(), k.getJabatanId());
        }

        tambahKaryawan.removeAllItems();
        tambahKaryawan.addItem(new Karyawan()); // Empty option

        for (Karyawan k : karyawanList) {
            tambahKaryawan.addItem(k);
        }
    }

    private void loadGajiPokok(int jabatanId) {
        try {
            if (jabatanId <= 0) {
                tambahGajiPokok.setText("");
                return;
            }

            JabatanController jabatanController = new JabatanController();
            Jabatan jabatan = jabatanController.getJabatanById(jabatanId);

            if (jabatan != null) {
                BigDecimal gaji = jabatan.getGajiPokok();

                // Remove decimal part if it's .00 (e.g., 8000000 instead of 8000000.00)
                if (gaji.scale() <= 0 || gaji.remainder(BigDecimal.ONE).compareTo(BigDecimal.ZERO) == 0) {
                    tambahGajiPokok.setText(gaji.toBigInteger().toString());
                } else {
                    // If there are significant decimal places, keep them
                    tambahGajiPokok.setText(gaji.stripTrailingZeros().toPlainString());
                }
            } else {
                tambahGajiPokok.setText("");
            }
        } catch (Exception e) {
            e.printStackTrace();
            tambahGajiPokok.setText("");
        }
    }

    private void setComboFromTable(JComboBox<?> combo, String value) {
        for (int i = 0; i < combo.getItemCount(); i++) {
            Object item = combo.getItemAt(i);
            String displayValue = item.toString(); // Works for both String and objects with toString()
            if (displayValue.equalsIgnoreCase(value)) {
                combo.setSelectedIndex(i);
                return;
            }
        }
        // If not found, select first item or none
        if (combo.getItemCount() > 0) {
            combo.setSelectedIndex(0);
        }

    }

    private void updateData() {
        try {
            // Get values
            String kode = tambahKD.getText(); 
            String gajiPokokText = tambahGajiPokok.getText().trim();
            Karyawan selectedKaryawan = (Karyawan) tambahKaryawan.getSelectedItem();

            // Validate
            if (selectedKaryawan == null || tambahPeriode.getDate() == null || gajiPokokText.isEmpty()) {
                JOptionPane.showMessageDialog(this, 
                    "Isi semua field dengan benar!", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Convert salary
            BigDecimal gajiPokok;
            try {
                gajiPokok = new BigDecimal(gajiPokokText.replaceAll("[.,]", ""));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, 
                    "Format gaji tidak valid!", 
                    "Error",    
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Create SlipGaji
            SlipGaji slipGaji = new SlipGaji();
            slipGaji.setKdSlip(kode);
            slipGaji.setGajiPokok(gajiPokok);
            slipGaji.setKdKaryawan(selectedKaryawan.getKdKaryawan());

            // Convert and set date
            LocalDate localDate = tambahPeriode.getDate();
            slipGaji.setPeriode(java.sql.Date.valueOf(localDate));

            // Save
            SlipGajiController controller = new SlipGajiController();
            if (controller.updateSlipGaji(slipGaji)) {
                JOptionPane.showMessageDialog(this, "Data berhasil diubah!");
                loadGaji();
                showPanelView();
                btnTambah.setText("Tambah");
            } else {
                JOptionPane.showMessageDialog(this, "Gagal mengubah data.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void deleteData() {
            int selectedRow = tableSlip.getSelectedRow();
            int confirm = JOptionPane.showConfirmDialog(this, "Apakah anda ingin menghapus data ini ?",
                    "Konfirmasi Hapus Data", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {

                    String idStr = tableSlip.getValueAt(selectedRow, 0).toString();


                    SlipGajiController slipGajiController = new SlipGajiController();
                    boolean success = slipGajiController.deleteSlipGaji(idStr);

                    if (success) {
                        JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
                        loadGaji(); 
                        resetForm(); 
                        showPanelView();
                        btnTambah.setText("Tambah");

                    } else {
                        JOptionPane.showMessageDialog(this, "Gagal menghapus data.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

   
//   FOR DETAIL GAJI

    private void insertDataDetail() {
    try {
        String kd = tambahKdDetail.getText().trim();
        String jenis = tambahJenis.getText().trim();
        String deskripsi = tambahDeskripsi.getText().trim();
        SlipGaji selectedSlipGaji = (SlipGaji) tambahKaryawanP.getSelectedItem();
        String jumlahText = tambahJumlah.getText().trim();
        
        // Get radio button selection
        boolean isTambah;
        if (istambah1.isSelected()) {
            isTambah = true;  // Tambahan
        } else if (isTambah0.isSelected()) {
            isTambah = false; // Pengurangan
        } else {
            JOptionPane.showMessageDialog(this, 
                "Pilih jenis (Tambahan/Pengurangan)!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate inputs
        if (selectedSlipGaji == null) {
            JOptionPane.showMessageDialog(this, 
                "Pilih karyawan terlebih dahulu!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (selectedSlipGaji.getKdSlip() == null) {
            JOptionPane.showMessageDialog(this, 
                "Data slip gaji tidak valid!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (jenis.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Jenis tidak boleh kosong!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (deskripsi.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Deskripsi tidak boleh kosong!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (jumlahText.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Jumlah tidak boleh kosong!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Parse jumlah
        BigDecimal jumlah;
        try {
            jumlah = new BigDecimal(jumlahText);
            if (jumlah.compareTo(BigDecimal.ZERO) <= 0) {
                JOptionPane.showMessageDialog(this, 
                    "Jumlah harus lebih besar dari 0!", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "Format jumlah tidak valid!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create new detail object
        DetailGaji detail = new DetailGaji();
        detail.setkdDetail(kd);
        detail.setKdSlip(selectedSlipGaji.getKdSlip());
        detail.setJenis(jenis);
        detail.setDeskripsi(deskripsi);
        detail.setIsTambah(isTambah);
        detail.setJumlah(jumlah);

        // Save to database using the controller
        DetailGajiController controller = new DetailGajiController();
        if (controller.insertDetailGaji(detail)) {
            JOptionPane.showMessageDialog(this, "Data detail berhasil disimpan!");
            loadDetailGaji(); // Refresh the detail list
            resetDetailForm(); // Clear the form
        } else {
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data detail.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

    private void resetDetailForm() {
    tambahKdDetail.setText("");
    tambahJenis.setText("");
    tambahDeskripsi.setText("");
    tambahJumlah.setText("");
    //buttonGroup1.clearSelection(); // Clear radio button selection
    tambahKaryawanP.setSelectedIndex(0); // Reset combo box
}
    
    
    private void loadComboSlip() {
        SlipGajiController controller = new SlipGajiController();
        List<SlipGaji> slipList = controller.getAllSlipGaji();

        tambahKaryawanP.removeAllItems();
        // Add empty option with a dummy SlipGaji object
        tambahKaryawanP.addItem(new SlipGaji("", "", null, BigDecimal.ZERO));

        for (SlipGaji s : slipList) {
            tambahKaryawanP.addItem(s);
        }

        // Custom renderer for better display
        tambahKaryawanP.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, 
                                                        boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof SlipGaji) {
                    SlipGaji s = (SlipGaji) value;
                    if (s.getKdSlip().isEmpty()) { // Check for empty option
                        setText("Pilih Slip Gaji");
                    } else {
                        setText(String.format("%s - %s - %s", 
                            s.getKdSlip(),
                            s.getKaryawan(),
                            new SimpleDateFormat("MMM yyyy").format(s.getPeriode())));
                    }
                }
                return this;
            }
        });
    }

    private void loadDetailGaji() {
        try {
            btnBatal.setVisible(false);
            btnDelete.setVisible(false);

            // Clear existing data
            DefaultTableModel model = (DefaultTableModel) tableDetailGaji.getModel();
            model.setRowCount(0);

            // Load new data
            DetailGajiController controller = new DetailGajiController();
            List<DetailGaji> details = controller.getAllDetailGaji();

            if (details != null && !details.isEmpty()) {
                for (DetailGaji detail : details) {
                    model.addRow(new Object[]{
                        detail.getkdDetail(),
                        detail.getKdSlip(),
                        detail.getJenis(),
                        detail.getDeskripsi(),
                        detail.getIsTambahAsInt(),
                        detail.getJumlah()
                    });
                }
            }
        } catch (Exception e) {
            System.err.println("Error loading details: " + e.getMessage());
            //clearDetailGajiTable();
        }
    }

    private void setTableDetailGaji() {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("Kode Detail");
    model.addColumn("Kode Slip");
    model.addColumn("Jenis");
    model.addColumn("Deskripsi");
    model.addColumn("Is Tambah");
    model.addColumn("Jumlah");
    tableDetailGaji.setModel(model);
}

    private void searchDataDetail() {
    String keyword = searchKodeSlip.getText().trim();
    try {
        DetailGajiController detailGajiController = new DetailGajiController();
        List<DetailGaji> detailGajis = detailGajiController.searchDetailGajiBySlip(keyword);

        DefaultTableModel model = (DefaultTableModel) tableDetailGaji.getModel();
        model.setRowCount(0); // Clear existing data

        if (detailGajis.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Tidak ditemukan data dengan kode slip: " + keyword, 
                "Informasi", 
                JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Add each detail to the table
        for (DetailGaji detail : detailGajis) {
            model.addRow(new Object[]{
                detail.getkdDetail(),
                detail.getKdSlip(),
                detail.getJenis(),
                detail.getDeskripsi(),
                detail.getIsTambahAsInt(),
                detail.getJumlah()
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error saat mencari data: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

    private void setComboFromTableDetail(JComboBox<SlipGaji> combo, String kdSlip) {
    for (int i = 0; i < combo.getItemCount(); i++) {
        SlipGaji item = combo.getItemAt(i);
        if (item.getKdSlip().equals(kdSlip)) {
            combo.setSelectedIndex(i);
            return;
        }
    }
    // If not found, select first item (empty option)
    if (combo.getItemCount() > 0) {
        combo.setSelectedIndex(0);
    }
}
    
    private void dataTableDetail(){

        int row = tableDetailGaji.getSelectedRow();
        
        
        tambahKdDetail.setText(tableDetailGaji.getValueAt(row, 0).toString());
        // Set combo box for slip gaji
        String kdSlip = tableDetailGaji.getValueAt(row, 1).toString();
        setComboFromTableDetail(tambahKaryawanP, kdSlip);
        
        
        tambahJenis.setText(tableDetailGaji.getValueAt(row, 2).toString());
        tambahDeskripsi.setText(tableDetailGaji.getValueAt(row, 3).toString());
        
        String isTambah =tableDetailGaji.getValueAt(row, 4).toString();
        if(isTambah.equals("1")){
            istambah1.setSelected(true);
            isTambah0.setSelected(false);
        }else{
            istambah1.setSelected(false);
            isTambah0.setSelected(true);
        }
        tambahJumlah.setText(tableDetailGaji.getValueAt(row, 5).toString());
       
  
        
    }
    
private void updateDataDetail() {
    try {
        // Get form values
        String kdDetail = tambahKdDetail.getText().trim();
        String jenis = tambahJenis.getText().trim();
        String deskripsi = tambahDeskripsi.getText().trim();
        SlipGaji selectedSlipGaji = (SlipGaji) tambahKaryawanP.getSelectedItem();
        String jumlahText = tambahJumlah.getText().trim();
        
        // Validate kdDetail (primary key for update)
        if (kdDetail.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Kode detail tidak valid!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get radio button selection
        boolean isTambah;
        if (istambah1.isSelected()) {
            isTambah = true;  // Tambahan
        } else if (isTambah0.isSelected()) {
            isTambah = false; // Pengurangan
        } else {
            JOptionPane.showMessageDialog(this, 
                "Pilih jenis (Tambahan/Pengurangan)!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate inputs
        if (selectedSlipGaji == null || selectedSlipGaji.getKdSlip() == null || selectedSlipGaji.getKdSlip().isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Pilih slip gaji yang valid!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (jenis.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Jenis tidak boleh kosong!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (deskripsi.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Deskripsi tidak boleh kosong!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (jumlahText.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Jumlah tidak boleh kosong!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Parse and validate jumlah
        BigDecimal jumlah;
        try {
            jumlah = new BigDecimal(jumlahText.replaceAll("[^\\d.]", ""));
            if (jumlah.compareTo(BigDecimal.ZERO) <= 0) {
                JOptionPane.showMessageDialog(this, 
                    "Jumlah harus lebih besar dari 0!", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "Format jumlah tidak valid!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create detail object with updated values
        DetailGaji detail = new DetailGaji();
        detail.setkdDetail(kdDetail);
        detail.setKdSlip(selectedSlipGaji.getKdSlip());
        detail.setJenis(jenis);
        detail.setDeskripsi(deskripsi);
        detail.setIsTambah(isTambah);
        detail.setJumlah(jumlah);

        // Update in database
        DetailGajiController controller = new DetailGajiController();
        if (controller.updateDetailGaji(detail)) {
            JOptionPane.showMessageDialog(this, 
                "Data detail berhasil diperbarui!", 
                "Sukses", 
                JOptionPane.INFORMATION_MESSAGE);
            loadDetailGaji(); // Refresh table
            resetDetailForm(); // Clear form
        } else {
            JOptionPane.showMessageDialog(this, 
                "Gagal memperbarui data detail.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}
    
    private void deleteDataDetail() {
            int selectedRow = tableDetailGaji.getSelectedRow();
            int confirm = JOptionPane.showConfirmDialog(this, "Apakah anda ingin menghapus data ini ?",
                    "Konfirmasi Hapus Data", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {

                    String kdStr = tableDetailGaji.getValueAt(selectedRow, 0).toString();


                    DetailGajiController detailGajiController = new DetailGajiController();
                    boolean success = detailGajiController.deleteDetailGaji(kdStr);

                    if (success) {
                        JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
                        loadDetailGaji(); 
                        resetForm(); 
                        

                    } else {
                        JOptionPane.showMessageDialog(this, "Gagal menghapus data.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    
    
    
}

